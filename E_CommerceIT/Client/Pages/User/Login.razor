@page "/Login"

@inject HttpClient Http
@inject NavigationManager navManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService

@using System.Text
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

<div class="container-fluid text-center" style="max-width: 60vh; margin-top: 5vh;">
    <h3 class="font-weight-light" style="margin-bottom: 10vh;">Login to your E-Commerce account!</h3>
    <h5>@Message</h5>
    <EditForm Model="user" OnValidSubmit="LoginUser">
        <div class="form-group">
            <label for="email">Email Address:</label>
            <InputText id="email" type="email" @bind-Value="user.UserEmail"  placeholder="..." class="form-control" required />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" @bind-Value="Password" class="form-control" placeholder="..." required />
        </div>
        <button class="btn btn-primary rounded-pill" style="width: 150px;" type="submit">Login</button>
    </EditForm>
</div>


@code {

    public string Password { get; set; }
    public string Message { get; set; }
    private Users user = new();

    private async Task LoginUser()
    {
        try
        {
            Message = null;
            byte[] barr = Encoding.ASCII.GetBytes(Password);
            user.UserPassword = barr;
            await Http.PostAsJsonAsync("User/ValidateUser", user);
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var authUser = authState.User;
            if (authUser.Identity.IsAuthenticated)
            {
                navManager.NavigateTo("allproducts", true);
            }
            else
            {
                Message = "Not Authenticated";
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }



}

