@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ICartService CartService
@inject NavigationManager navManager

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="" style="color: #b8c8d0"><img class="img-fluid" style="height: 2rem; padding-left: 2vh;" src="/images/logo3.png" />&nbsp;E-Commerce</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li style="border-top: 1px solid slategrey" class="dropdown-divider"></li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="allproducts" Match="NavLinkMatch.All">
                <span class="oi oi-box" aria-hidden="true"></span> All Products
            </NavLink>
        </li>
        @if (categories == null)
        {

        }
        else
        {
            @foreach (var item in categories)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@item.CategoryUrl" Match="NavLinkMatch.All">
                        <span class="oi oi-@item.CategoryIcon" aria-hidden="true"></span> @item.CategoryType
                    </NavLink>
                </li>
            }
        }
        @if (isAdmin == true)
        {
        <li style="border-top: 1px solid slategrey" class="dropdown-divider"></li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="chartlist" Match="NavLinkMatch.All">
                <span class="oi oi-bar-chart" aria-hidden="true"></span> Category Charts
            </NavLink>
        </li>
        }
        <li style="border-top: 1px solid slategrey" class="dropdown-divider"></li>
        <AuthorizeView>
            <Authorized>
                
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="Login" Match="NavLinkMatch.All">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                </li>
                @if (isAdmin == false && isCustomer == false)
                { 
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="register" Match="NavLinkMatch.All">
                        <span class="oi oi-lock-unlocked" aria-hidden="true"></span> Register
                    </NavLink>
                </li>
                }
                @if (isAdmin == true || isCustomer == true)
                {
                <li class="nav-item px-3">
                    <a class="nav-link" href="" @onclick="Logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                    </a>
                </li>
                }
            </Authorized>
            <NotAuthorized>
                Sorry, you do not have access to this page.
            </NotAuthorized>
        </AuthorizeView>

    </ul>
</div>

@code {

    private bool collapseNavMenu = true;
    private List<Category> categories;
    private Users newUser = new();
    public bool isAdmin { get; set; } = false;
    public bool isCustomer { get; set; } = false;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<Category>>("General/GetCategories");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;
        if (authUser.Identity.IsAuthenticated && authUser.IsInRole("isAdmin") == true)
        {
            isAdmin = true;
            StateHasChanged();
        }
        if (authUser.Identity.IsAuthenticated && authUser.IsInRole("isCustomer") == true)
        {
            isCustomer = true;
            StateHasChanged();
        }
    }


    private async Task Logout()
    {
        await Http.PostAsJsonAsync<Users>("User/ClearUser", newUser);
        await LocalStorage.RemoveItemAsync("cart");
        navManager.NavigateTo("Login", true);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    }
}
